// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  firstName         String
  lastName          String
  age               Int
  gender            String
  sexualOrientation String
  selectedAddress   String?    @unique
  linkedAddresses   Json?
  email             String?    @unique
  password          String?
  city              String?
  country           String?
  bio               String?
  interests         Json?
  latitude          Float?
  longitude         Float?
  maxDistance       Int?
  minAge            Int?
  maxAge            Int?
  genderPreference  String?
  profilePicture    String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  accounts          Account[]
  sessions          Session[]
  files             UserFile[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserFile {
  id        Int      @id @default(autoincrement())
  userId    Int
  s3Key     String   @unique
  access    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
